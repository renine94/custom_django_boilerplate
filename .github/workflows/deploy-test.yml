name: 🚀 [CICD 테스트...]

on:
  push:
    branches: [main]

concurrency:
  group: deploy-test
  cancel-in-progress: true

env:
  APP_ENV: test
  ECR_NAME: my-backend-test

jobs:
  build:
    name: build
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: 1) 코드 가져오기
        uses: actions/checkout@v3

      - name: 2) 환경변수값 테스트
        run: |
          echo "CICD 테스트를 시작합니다."
          echo GITHUB_ENV = $GITHUB_ENV
          echo GITHUB_ACTION = $GITHUB_ACTION
          echo ECR_NAME = $ECR_NAME
          echo GITHUB_EVENT_NAME = $GITHUB_EVENT_NAME

      - name: 3) AWS 자격인증
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 4) Amazon ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#
      - name: 5) Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 6) Build, tag, and push the image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          file: ./deploy/Dockerfile
          platforms: linux/amd64
          push: true
          build-args: APP_NAME=local,AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_NAME  }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
