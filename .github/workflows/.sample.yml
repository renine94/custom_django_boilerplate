#name: ðŸš€ Deploy Backend main
#
#on:
#  workflow_dispatch:
#    inputs:
#      upgradeVersionType:
#        description: "v1.2.3 ê¸°ì¤€ìœ¼ë¡œ major(v2.0.0) minor(v1.3.0) patch(v1.2.4)"
#        required: true
#        default: "patch"
#        type: choice
#        options:
#          - major
#          - minor
#          - patch
#
#env:
#  FITPET_ENV: prod
#  IMAGE_TAG: ${{ github.sha }}
#  CLUSTER: fitpetmall-prod
#  APP_IMAGE: /fitpet/prod/mall-backend-app
#  ECR_REPO_URL: 895867684285.dkr.ecr.ap-northeast-2.amazonaws.com
#  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#  GITHUB_URL: https://github.com/FitpetKorea
#
#jobs:
#  notify-slack-before-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Slack notify
#        if: always()
#        env:
#          TARGET: fitpetmall-backend
#          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
#          STATUS: ${{ job.status }}
#          PERIOD: start
#          SLACK_WEBHOOK_DEPLOY_URL: ${{ secrets.SLACK_WEBHOOK_DEPLOY_URL }}
#        run: sh docs/infra/script/slack_deploy_notify.sh
#
#  build-nginx-prod:
#    name: Build Nginx Prod
#    runs-on: ubuntu-latest
#    needs:
#      - notify-slack-before-deploy
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build nginx image
#        id: build-image
#        run: |
#          export IMAGE_NAME=${ECR_REPO_URL}/fitpet/prod/mall-backend-nginx:latest
#          docker build -t ${IMAGE_NAME} -f ./docs/infra/nginx_v1_2/nginx.Dockerfile .
#          docker push ${IMAGE_NAME}
#          echo "::set-output name=image::${IMAGE_NAME}"
#
#  build-backend-prod:
#    name: Build Backend Prod
#    runs-on: ubuntu-latest
#    needs:
#      - notify-slack-before-deploy
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build app image
#        id: build-image
#        run: |
#          export IMAGE_NAME=${ECR_REPO_URL}/fitpet/prod/mall-backend-app:latest
#          docker build -t ${IMAGE_NAME} \
#          --build-arg FITPET_ENV=${FITPET_ENV} \
#          --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
#          --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
#          -f ./docs/infra/app/app.Dockerfile .
#          docker push ${IMAGE_NAME}
#          echo "::set-output name=image::${IMAGE_NAME}"
#
#  deploy-backend-prod:
#    runs-on: ubuntu-latest
#    needs:
#      - build-nginx-prod
#      - build-backend-prod
#    env:
#      PROJECT_NAME: fm-backend-prod-1_2
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install ecs cli
#        uses: marocchino/setup-ecs-cli@v1
#        with:
#          version: "latest"
#
#      - name: Deploy
#        run: aws ecs update-service --cluster "${CLUSTER}" --service "${PROJECT_NAME}" --force-new-deployment
#
#  deploy-worker:
#    runs-on: ubuntu-latest
#    needs:
#      - build-backend-prod
#    env:
#      PROJECT_NAME: service-fm-worker-prod
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install ecs cli
#        uses: marocchino/setup-ecs-cli@v1
#        with:
#          version: "latest"
#
#      - name: Deploy
#        run: aws ecs update-service --cluster "${CLUSTER}" --service "${PROJECT_NAME}" --force-new-deployment
#
#  deploy-worker-heavy1:
#    runs-on: ubuntu-latest
#    needs:
#      - build-backend-prod
#    env:
#      PROJECT_NAME: service-fm-worker-heavy1-prod
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install ecs cli
#        uses: marocchino/setup-ecs-cli@v1
#        with:
#          version: "latest"
#
#      - name: Deploy
#        run: aws ecs update-service --cluster "${CLUSTER}" --service "${PROJECT_NAME}" --force-new-deployment
#
#  deploy-worker-cache:
#    runs-on: ubuntu-latest
#    needs:
#      - build-backend-prod
#    env:
#      PROJECT_NAME: service-fm-worker-cache-prod
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install ecs cli
#        uses: marocchino/setup-ecs-cli@v1
#        with:
#          version: "latest"
#
#      - name: Deploy
#        run: aws ecs update-service --cluster "${CLUSTER}" --service "${PROJECT_NAME}" --force-new-deployment
#
#  deploy-worker-excel-export:
#    runs-on: ubuntu-latest
#    needs:
#      - build-backend-prod
#    env:
#      PROJECT_NAME: service-fm-worker-excel-export-prod
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install ecs cli
#        uses: marocchino/setup-ecs-cli@v1
#        with:
#          version: "latest"
#
#      - name: Deploy
#        run: aws ecs update-service --cluster "${CLUSTER}" --service "${PROJECT_NAME}" --force-new-deployment
#
#  deploy-scheduler:
#    runs-on: ubuntu-latest
#    needs:
#      - deploy-worker
#    env:
#      PROJECT_NAME: service-fm-scheduler-prod
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install ecs cli
#        uses: marocchino/setup-ecs-cli@v1
#        with:
#          version: "latest"
#
#      - name: Deploy
#        run: aws ecs update-service --cluster "${CLUSTER}" --service "${PROJECT_NAME}" --force-new-deployment
#
#  create-release:
#    runs-on: ubuntu-latest
#    needs:
#      - deploy-scheduler
#      - deploy-backend-prod
#    steps:
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 16
#      - name: Install NPM
#        run: |
#          npm init --y
#          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GIT_HUB_PERSONAL_ACCESS_TOKEN }}" > ~/.npmrc
#          echo "@fitpetkorea:registry=https://npm.pkg.github.com" >> ~/.npmrc
#          npm install @fitpetkorea/git-action-script
#
#      - name: Print Current Version
#        run: |
#          echo "Print NPM Version Info"
#          grep @fitpetkorea/git-action-script package.json
#
#      - name: Create Release
#        uses: actions/github-script@v6
#        with:
#          script: |
#            const { createRelease } = require('@fitpetkorea/git-action-script')
#            await createRelease({ context, github })
#
#  notify-slack-after-deploy:
#    runs-on: ubuntu-latest
#    needs:
#      - create-release
#    steps:
#      - uses: actions/checkout@v2
#      - name: Slack notify
#        if: always()
#        env:
#          TARGET: fitpetmall-backend
#          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
#          STATUS: ${{ job.status }}
#          PERIOD: finish
#          SLACK_WEBHOOK_DEPLOY_URL: ${{ secrets.SLACK_WEBHOOK_DEPLOY_URL }}
#        run: sh docs/infra/script/slack_deploy_notify.sh
