name: üöÄ [CICD ÌÖåÏä§Ìä∏...]

on:
  push:
    branches: [main]

concurrency:
  group: deploy-test
  cancel-in-progress: true

env:
  APP_ENV: test
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: my-backend-test
  CONTAINER_NAME: my_container_name
  ECS_CLUSTER: my_ecs_cluster
  ECS_SERVICE: my_ecs_service
  ECS_TASK_DEFINITION: .deploy/task-definition.json
  IMAGE_PATH: 866611624080.dkr.ecr.ap-northeast-2.amazonaws.com/my-backend-test:latest

jobs:
  build:
    name: build
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: 1) ÏΩîÎìú Í∞ÄÏ†∏Ïò§Í∏∞
        uses: actions/checkout@v3

      - name: 2) ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞í ÌÖåÏä§Ìä∏
        run: |
          echo "CICD ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§."
          echo GITHUB_ENV = $GITHUB_ENV
          echo GITHUB_ACTION = $GITHUB_ACTION
          echo ECR_REPOSITORY = $ECR_REPOSITORY
          echo GITHUB_EVENT_NAME = $GITHUB_EVENT_NAME

      - name: 3) AWS ÏûêÍ≤©Ïù∏Ï¶ù
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 4) Amazon ECR Î°úÍ∑∏Ïù∏
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#
      - name: 5) Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 6) Build, tag, and push the image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          build-args: APP_NAME=local,AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY  }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 7) set image variable
        id: set-image-path
        run: |
          echo "IMAGE_PATH=${{  steps.build-image.outputs.Metadata.image.name }}" >> $GITHUB_OUTPUT
          echo ${{  steps.build-image.outputs.Metadata.image.name }}

      - name: 8) Get Image Path
        run: echo "IMAGE_PATH = ${{ steps.set-image-path.outputs.IMAGE_PATH }}"

  deploy:
    name: deploy
    environment: dev
    runs-on: ubuntu-latest
    needs:
      - build
    env:
      FITPET_ENV: prod
      CLUSTER: myapp-cluster-prod
      PROJECT_NAME: myapp-backend-prod

    steps:
      - name: 1) ÏΩîÎìú Ïù¥Îèô
        uses: actions/checkout@v3

      - name: 2) AWS ÏûêÍ≤©Ïù∏Ï¶ù
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 3) Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_PATH }}
#          image: ${{ steps.build-image.outputs.image.name }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
